Section 7
___________
* The content is the one that guides the design of the project and not the opposite.
* don't come with a cool design and then find content to fill it.
* 1. write the content.

* in the css file, it is recommended that we put a system of the used fonts, sizes and 
  line heights to reference them in future uses.
  
  To keep the style consistent.
* The responsive element of the website is planned from the start.

* When a page is loaded, all relative units are converted to pixels.
* rem: root elementfont size, which is the default font-size that is specified by the root element (html element).

* to specify the user-defined rem value, we simply change the font size in the html element.
* we should use a percentage for that. eg. 16px -> 10px ---> 10 / 16 = 62.5%.
* max-width instead of width, to make the element shrink if the browser becomes smaller.

* if we set the hero section width to 100%, then it will grow as the window grows, but if width were set
  as pixels, then the element will shrink if the window shrinks.
  but a max-width is the best of both worlds.

* anchors are inline element, so top and bottom margins and padding do not work.
* border radius should be made by pixels.

* sometimes when we add border to an element, it plays with the layout, that's because
  the border is on the outside.

  to make the border inside, we will use the box-shadow trick and set it to inset.
* add the shared styles in the shared class.

* the transition is put in the steady state rule.
  it can have values that describes what properties will change, and the time.

* helper class, a class we put to multiple elements that share the same property.
  we should annotate it with the !important.

* to make the pictures overlap, we don't simply use a negative gap value for the 
  flex container, we use a margin of negative value.

* main element is used for sctions that are only used once in a website,
  so a navigation bar doesn't make sense if it is in a main.

* when making sticky elements, it is better to give it a fixed height.
* to add a nav bar, we simply add a component wherever we like, just add it 
  as a seperate section, not included in other.

* a nav bar is done this way, ul inside the nav, this unordered list contains 
  li that contains a.
* if the color is a text, then we check the contrast checker.
* a good practice is to keep track of the values you used in css, so that 
  the consistency of the website is fulfiled.

* a convention is used for wep pages width is 1200 or 1140px.
* hero sections are usually wider than the rest of the sections.

* a reusable rule: the idea is to extract a duplicated styles from different 
  rules into a single rule that can be applied to an element if the specific 
  styles are wanted on that element.

* height of a before or after element using percentages doesn't work, we use 
  a trick of padding-bottom as the height property.

* justify-content : space-around; also adds space to the start and end of 
  a flex item.

* filter property has a lot of functionalities.
* overflow property, basically defines what will happen when overflow occures.

* make sure in cards for the images to have the same aspect ratio.

* it isn't a good practice if we added more styles to our reusable classes.
* adding a border to anchor instead of the text decoration looks better.

* currentColor keyword is a variable that has the value of the current test color.
  if the text color changes, so will the currentColor.

* when we want to remove a border, if we set it to null, the layout may change a little,
  we use the transparent color keyword to basically set it as display none.

* we don't want to make the customer photos relative so they wouldn't get too big and worse quality.
* figcaption is only allowed in figures, figures are the best 

* there is white spaces around images because they are inline elements.
* similar elements, it is better for the number of lines to be somewhat the same.

* fr idea, we could think of them as percentages, to allow for more precise sizing for columns.
* big text usually aren't too bold.

* the cards in the pricing sections are block level elements, therefore they occupy the entire
  avalible width.

* the :not pseudo class can take other pseudo classes as argument to reverse the logic.
* .grid:last-child, is applied to any element with the class grid, who happens to be the last child.

* the ionicons use the default box model.

* font-size: 1.8rem for main text.

* we added the grid class to the pricing-info to give it the same margin as the frid.
* we appened the margin-bottom-md class to the pricing-plans to override the already defined margin bottom.

* linear-gradient(x deg, color1, color2), we can use degrees for direction or "to right" 
  "to right bottom" ...etc keywords.

* background size set to cover to make the image fit the container.
* background position can be helpful.

* when we set background image, there is no alt text, but we should add it to the div by
  setting the role to image, and aria-label to the alt text.

* to align the cta section with the rest, we removed the background color from the container div
  to another div inside it so that the color doesn't take the available padding.

* you can only send and recieve data in html, using the action attribute on the form tag.
* by default, labels, inputs are all inline elements.
* we should use the label for the info about the text field, while the placeholder for the required format.
* the action attribute is used to define where the data is heading when we send it.

* the select element along with option is basically a combo box.
* in every form there should be a button to send the data.

* in option, a value attribute specifies the value that will be sent when we submit.
* jonas likes to use a regular button instead of input of type submit.

* the first option usually is value is empty, so the form can't be sent unless we select
  a different option.

* select is in the same level as the input.
* required makes the input required to be filled before submission.

* we can force an attribute to be inherited using the inherit keyword.

* there is a placeholder pseudo element.
* outline is styled just as border, it is necessary for accecibility.
* outline is not a part of the box model.

* to style the outer border that is visible when we press tab, we can use an outline
  or a box-shadow.

  focus pseudo class.
* we can select every element in decendent like .cta *:focus.

* the items inside the main are usually the ones that aren't repeated.
  but headers and footers are repeatable so they are outside the main tag.

* footers are filled with links, even the logos and icons.

* links in navs are better put in an unordered list.

* in the anchor, we can use some protocols? like mailto: or tel:,
  and when they are clicked, a special behaviour happens.
* address tag is a semantic div for addresses like nav.

* flexbox trick, to push an element to the extreme, we put the elements in a flexbox,
  then use margin: auto, to get all the available space.

* we used visual hierarchy using font colors in the footer.

SECTION 8
_____________

* If we reversed designed the project, if we started on mobile, then to make it responsive
  we need to use the min-width property.

  but because we built it on the desktop, then we should use max-width.

* media quries basically are code to overwrite certain styles at certain viewwport.
* if there is conflicting styles in media queries, the last rules in the css file
  will apply.
* the meta tag with the name viewport, is crucial to respinsive design.
  
  because this gets rid out of the way websites are on mobile, they don't get 
  zoomed out to fit the page, instead the width of the website is the same as the device
  width.

* We should use media queries in terms of rem and em, and not fixed pixels, 
  to make it adapt to the font size the user chooses.

  * media doesn't work with rem properly so we use em.
  * rem and em doesn't depend on the font-size that we overwritten in the html style.
    so they are 16px.
  * em is the current element font-size, while rem is the root font-size.

* media queries can work because of the 3 responsive ingredients, fluid grids,
  responsive images, and responsive units.

* text-align works on inline non-text elements.
* usually every query works for 200px - 300px, so we should account for some size
  smaller than the breakpoint.

/*Tablets 13:01*/

* when making a drop down menu, we need javascript to execute the desired behaviour.
  if the information in that drop down is dynamically generated, we should do that 
  in javascript code.

  but if the info is static, then the info should be statically typed in HTML, and use 
  javascript to simply set the display to block.

* a trick to center one item, is to make its container a flexbox, and setting the centering
  styles to center the only flex element it contains.

* display: none; allows no transitions at ALL, we can use opacity: 0; instead.

* in CSS, we can select elements based on attributes assigned to them.

* to properly hide an element we should do the following 3 steps:
  1) hide the element visually using opacity: 0;
  2) delete events pointer-events: none;
  3) remove it from screen readers by visibility: hidden;

  when we want to show the element, we should reverse all those attributes.

* to make a slide animation, we use translate property, but alone makes it so that 
  we can scroll to the nav bar even though its opacity is set to 0;

  to fix that we need overflowX set to hidden;
* transform: translate has better performence than using left or right.